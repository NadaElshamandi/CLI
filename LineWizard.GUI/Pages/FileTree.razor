@using LineWizard.Shared
@page "/filecontent/{filePath}"
@using System.IO

<MudTreeView T="TreeItemData" ServerData="async (a) => await LoadFolderData(a)" Hover="true" Items="TreeItems" Width="100%">
	<ItemTemplate Context="item">
		<MudTreeViewItem Items="@item.TreeItems" Icon="@item.Icon" LoadingIconColor="Color.Info" CanExpand="@item.CanExpand">
			<BodyContent>
				<div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
					<MudText Style="justify-self: start;">@item.Text</MudText>
					<div style="justify-self: end;">
						<MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" @onclick="async () => await DeleteItem(item)" />
						<MudFab Color="Color.Inherit" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" />
					</div>
				</div>
			</BodyContent>
		</MudTreeViewItem>
	</ItemTemplate>
</MudTreeView>

@code {

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public string Text { get; set; }

        public string Icon { get; set; }

        public bool CanExpand { get; set; } = false;


        public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(string text, string icon, bool canExpand = false)
        {
            Text = text;
            Icon = icon;
            CanExpand = canExpand;
        }
    }

    // Navigate to the component that displays the file content

    protected override void OnInitialized()
    {
		var filesAndFolders = CommandPrompt.ListFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
		var srcFolder = TreeItems.FirstOrDefault(ti => ti.Text == "src");
		if (srcFolder != null)
		{
			srcFolder.TreeItems.Add(new TreeItemData("NewFolder", Icons.Material.Filled.Folder));
		}

		foreach (var folder in filesAndFolders.folders)
		{
			TreeItems.Add(new TreeItemData(folder, Icons.Material.Filled.Folder, true));
		}
		foreach (var file in filesAndFolders.files)
		{
			TreeItems.Add(new TreeItemData(file, Icons.Custom.FileFormats.FileDocument));
		}
	}

	private async Task DeleteItem(TreeItemData item)
	{
		if (item.Icon == Icons.Material.Filled.Folder)
		{
			// delete folder
			Directory.Delete(item.Text, true);
		}
		else
		{
			// delete file
			File.Delete(item.Text);
		}
		TreeItems.Remove(item);
		await InvokeAsync(StateHasChanged);
	}

	public async Task<HashSet<TreeItemData>> LoadFolderData(TreeItemData parentNode)
	{
		await Task.Delay(500);
		if (parentNode is null)
		{
			return new HashSet<TreeItemData>();
		}
		return parentNode.TreeItems;
	}
}
