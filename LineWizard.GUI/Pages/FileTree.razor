@using LineWizard.Shared
@page "/filecontent/{filePath}"
@using System.IO
@using System.Text;
<div style="width:100%; padding:1rem">
    <MudTextField T="string" ValueChanged=OnValueChanged Value=@OrderValue Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"/>
    <MudTreeView T="TreeItemData" ServerData="async (a) => await LoadFolderData(a)" Hover="true" Items="TreeItems" Width="100%">
        <ItemTemplate Context="item">
            <MudTreeViewItem Value="item" Items="@item.TreeItems" Icon="@item.Icon" LoadingIconColor="Color.Info" CanExpand="@item.CanExpand">
                <BodyContent>
                    <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%;user-select:none" @ondblclick="()=>OpenItem(item)">
                        <MudText Style="justify-self: start;">@item.Title</MudText>
                        <div style="justify-self: end;">
                            @if (item.Type == ListingType.File)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" @onclick="async (e) => await DeleteItem(item)" />
                            }
                            else
                            {
                                <MudFab Color="Color.Inherit" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" @onclick="async () => await AddItem(item)" />
                            }
                        </div>
                    </div>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Style="justify-self:flex-end; width:12rem; position:fixed; bottom:2.5rem; left:2.5rem" Label="Add Folder" @onclick="AddFolder" />
</div>
@code {
    private string OrderValue { get; set; } = string.Empty;

    private void OnValueChanged(string newValue)
    {
        try
        {
            FSGrep.Recursive = true;
            var results = FSGrep.GetMatchingFiles(newValue, "*", mainPath);
            StringBuilder stringbuilder = new StringBuilder("RESULTS:");
            foreach (var result in results)
            {
                stringbuilder.AppendLine(result.ToString());
            }
            TextChanged.InvokeAsync(stringbuilder.ToString());
        }
        catch (Exception e)
        {
            
        }


    }
    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public enum ListingType
    {
        File,
        Folder
    }

    public class TreeItemData
    {
        public string Title { get; set; }

        public string Path { get; set; }

        public string Icon { get; set; }

        public bool CanExpand { get; set; } = false;

        public ListingType Type { get; set; }

        public TreeItemData Parent { get; set; }

        public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(string text, string path, ListingType type, bool canExpand = false, TreeItemData parent = null)
        {
            Title = text;
            Path = path;
            CanExpand = canExpand;
            Parent = parent;
            Type = type;

            switch (Type)
            {
                case (ListingType.File):
                    Icon = Icons.Custom.FileFormats.FileDocument;
                    break;
                case (ListingType.Folder):
                    Icon = Icons.Material.Filled.Folder;
                    break;
                default:
                    break;
            }
        }
    }

    public string mainPath = Environment.CurrentDirectory;
    // Navigate to the component that displays the file content
    protected override void OnInitialized()
    {
        var filesAndFolders = CommandPrompt.ListFiles(mainPath);

        foreach (var folderPath in filesAndFolders.folders)
        {
            TreeItems.Add(new TreeItemData(Path.GetFileName(folderPath), folderPath, ListingType.Folder, true));
        }
        foreach (var filePath in filesAndFolders.files)
        {
            TreeItems.Add(new TreeItemData(Path.GetFileName(filePath), filePath, ListingType.File));
        }
    }

    private async Task DeleteItem(TreeItemData item)
    {
        var success = CommandPrompt.RemoveFile(item.Path);
        if (success)
        {
            if (item.Parent is null)
            {
                TreeItems.Remove(item);
            }
            else
            {
                item.Parent.TreeItems.Remove(item);
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddItem(TreeItemData item)
    {
        var path = Path.Combine(item.Path, "NewFile.txt");
        CommandPrompt.CreateFile(path);
        var treeItem = new TreeItemData(Path.GetFileName(path), path, ListingType.File, false, item);
        if (!item.TreeItems.Any((e) => e.Path == treeItem.Path))
        {
            item.TreeItems.Add(treeItem);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddFolder()
    {
        var path = Path.Combine(mainPath, "NewFolder");
        CommandPrompt.CreateDirectory(path);
        var treeItem = new TreeItemData(Path.GetFileName(path), path, ListingType.Folder, false);
        if (!TreeItems.Any((e) => e.Path == treeItem.Path))
        {
            TreeItems.Add(treeItem);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OpenItem(TreeItemData item)
    {
        var content = CommandPrompt.ReadFile(item.Path);
        await TextChanged.InvokeAsync(content);
        await InvokeAsync(StateHasChanged);
    }

    public async Task<HashSet<TreeItemData>> LoadFolderData(TreeItemData parentNode)
    {
        var filesAndFolders = CommandPrompt.ListFiles(parentNode.Path);

        foreach (var folder in filesAndFolders.folders)
        {
            parentNode.TreeItems.Add(new TreeItemData(Path.GetFileName(folder), folder, ListingType.Folder, true, parentNode));
        }
        foreach (var file in filesAndFolders.files)
        {
            parentNode.TreeItems.Add(new TreeItemData(Path.GetFileName(file), file, ListingType.File, false, parentNode));
        }
        return parentNode.TreeItems;
    }
}
